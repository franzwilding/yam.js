// Generated by CoffeeScript 1.3.3
(function() {

  (function($, window) {
    var YamWrapper, defaults, document, pluginName;
    pluginName = 'yam';
    document = window.document;
    defaults = {
      hover_delay: 1000,
      remember_menu_state: false,
      hover_animations: {
        "in": 100,
        out: 100
      },
      layout_vertical_at: 3,
      selectors: [['self', '> li'], ['> ul, > ol', '> li']],
      callbacks: {
        mouseenter: void 0,
        mouseleave: void 0,
        click: void 0
      },
      click_events: 'click, touchend',
      is_active: function(element) {
        return element.hasClass('active');
      }
    };
    YamWrapper = (function() {

      function YamWrapper(element, options) {
        this.element = element;
        this.options = {};
        this.menus = [];
        this.active = [];
        this.options = $.extend({}, defaults, options);
        this.init();
      }

      YamWrapper.prototype.init = function() {
        var that;
        that = this;
        $(this.element).addClass('yam-menu');
        return this.initLayouts();
      };

      YamWrapper.prototype.initLayouts = function() {
        var that, total_menu_height;
        that = this;
        this._walkMenu($(this.element), function(that, parent, items, level, old_parent) {
          parent.addClass('yam-' + that._getLayout(level));
          parent.data('yam-level', level);
          if (that.menus[level] === void 0) {
            that.menus[level] = [];
          }
          that.menus[level].push(parent);
          if (that._getLayout(level) === 'horizontal') {
            if (that.options.is_active(old_parent)) {
              that.active[level] = parent;
              old_parent.addClass('yam-active');
            }
          }
          items.each(function(i, item) {
            $(item).addClass('yam-item');
            if (that.options.is_active($(item))) {
              $(item).addClass('yam-active');
            }
            that.manageClick($(item));
            if (that._getLayout(level) === 'vertical') {
              return $(item).css('min-width', that._getElementWidth($(item)));
            }
          });
          if (parent !== old_parent) {
            that.manageHover(old_parent, parent);
            if (items.length > 0) {
              return old_parent.addClass('yam-parent');
            }
          }
        });
        total_menu_height = parseInt($(this.element).css('margin-bottom'), 10);
        $(this.element).data('yam-margin-bottom', total_menu_height);
        $.each(this.menus, function(l, level) {
          var level_height;
          level_height = 0;
          $.each(level, function(i, e) {
            var ignore, menu_height;
            ignore = false;
            if (that.active[l] !== void 0) {
              if (that.active[l] === e) {
                ignore = true;
              }
            }
            if (e[0] === that.element) {
              ignore = true;
            }
            if (!ignore) {
              $(e).hide();
            }
            if (e[0] !== that.element && e.hasClass('yam-horizontal')) {
              menu_height = that._getElementHeight(e);
              if (menu_height > level_height) {
                return level_height = menu_height;
              }
            }
          });
          return total_menu_height = total_menu_height + level_height;
        });
        $(this.element).css('margin-bottom', total_menu_height);
        $.each(this.active, function(l, menu) {
          if (menu !== void 0) {
            return that.checkHeightForMenu(menu);
          }
        });
        return $(window).resize($.debounce(50, function() {
          $.each(that.active, function(l, menu) {
            if (menu !== void 0) {
              return that.checkHeightForMenu(menu);
            }
          });
          total_menu_height = $(that.element).data('yam-margin-bottom');
          $.each(that.menus, function(l, level) {
            var level_height;
            level_height = 0;
            $.each(level, function(i, e) {
              var menu_height;
              if (e[0] !== that.element && e.hasClass('yam-horizontal')) {
                menu_height = that._getElementHeight(e);
                if (menu_height > level_height) {
                  return level_height = menu_height;
                }
              }
            });
            return total_menu_height = total_menu_height + level_height;
          });
          return $(that.element).css('margin-bottom', total_menu_height);
        }));
      };

      YamWrapper.prototype.checkHeightForMenu = function(element) {
        var height, level;
        level = element.data('yam-level');
        if (level !== null) {
          if (this.menus[level - 1][0] !== void 0) {
            height = this._getElementHeight(this.menus[level - 1][0]);
            if (this._getLayout(level) === 'horizontal') {
              return element.css('top', height);
            }
          }
        }
      };

      YamWrapper.prototype.positionSubmenu = function(element, old_parent) {
        var body_width, level, menu_width, parent_width;
        level = element.data('yam-level');
        if (this._getLayout(level) === 'vertical') {
          menu_width = this._getElementWidth(element, true);
          body_width = this._getElementWidth($("body"));
          element.css('top', 'auto');
          element.css('bottom', 'auto');
          element.css('left', 'auto');
          element.css('right', 'auto');
          if (this._getLayout(level - 1) === 'vertical') {
            parent_width = this._getElementWidth(old_parent, true);
            if (body_width > (parent_width + menu_width + old_parent.offset().left)) {
              element.css('right', -menu_width);
              return element.css('top', old_parent.position().top);
            } else if (menu_width < old_parent.offset().left) {
              element.css('left', -menu_width);
              return element.css('top', old_parent.position().top);
            } else {
              return element.css('bottom', -this._getElementHeight(element, true));
            }
          } else {
            if (body_width < (menu_width + old_parent.offset().left)) {
              element.css('left', 'auto');
              return element.css('right', 0);
            }
          }
        }
      };

      YamWrapper.prototype.manageClick = function(element) {
        var that;
        that = this;
        if (Modernizr.touch) {
          element.bind(this.options.click_events, function(event) {
            var data;
            event.preventDefault();
            data = {
              obj: that,
              element: element
            };
            that._manageMouseEnter(element, element.find('.yam-horizontal, .yam-vertical').first());
            element.addClass("yam-active");
            return $(window).bind(that.options.click_events, data, that.windowClickHandler);
          });
        }
        if ($.isFunction(this.options.callbacks.click)) {
          return element.bind(that.options.click_events, this.options.callbacks.click);
        }
      };

      YamWrapper.prototype.windowClickHandler = function(event) {
        var that;
        if ($(event.data.element).closest('.yam-menu')[0] !== $(event.target).closest('.yam-menu')[0]) {
          that = this;
          return setTimeout((function() {
            $(event.data.element).removeClass("yam-active");
            event.data.obj._manageMouseLeave($(event.data.element), $(event.data.obj.element));
            $(event.data.obj.element).find('.yam-active').removeClass('yam-active');
            return $(window).unbind(event.data.obj.options.click_events, that.windowClickHandler);
          }), 0);
        }
      };

      YamWrapper.prototype.manageHover = function(element, child) {
        var that;
        that = this;
        if ($.inArray(child, this.active) > 0) {
          element.mouseenter(function(event) {
            element.siblings().find('.yam-hover').each(function(i, e) {
              return that._hideMenu($(e));
            });
            return child.show();
          });
          return;
        }
        element.mouseenter(function(event) {
          clearTimeout(element.data('yam-mouseleave-timer'));
          return that._manageMouseEnter(element, child);
        });
        return element.mouseleave(function(event) {
          var timer;
          timer = setTimeout((function() {
            return that._manageMouseLeave(element, child);
          }), that.options.hover_delay);
          return element.data('yam-mouseleave-timer', timer);
        });
      };

      YamWrapper.prototype._manageMouseEnter = function(element, child) {
        var that;
        if (!this.isMenuHover(child)) {
          that = this;
          element.siblings().find('.yam-hover').each(function(i, e) {
            return that._hideMenu($(e));
          });
          if (this.active[child.data('yam-level')] !== void 0) {
            this.active[child.data('yam-level')].hide();
          }
          this._showMenu(child, element);
          if ($.isFunction(this.options.callbacks.mouseenter)) {
            return this.options.callbacks.mouseenter(event, element);
          }
        }
      };

      YamWrapper.prototype._manageMouseLeave = function(element, child) {
        var that;
        that = this;
        child.find('.yam-horizontal, .yam-vertical').each(function(i, e) {
          return that._hideMenu($(e));
        });
        if ((!this.options.remember_menu_state) || (child.hasClass('yam-vertical')) || (this.active[child.data('yam-level')] !== void 0)) {
          this._hideMenu(child);
          if (this.active[child.data('yam-level')] !== void 0) {
            this.active[child.data('yam-level')].show();
          }
        }
        if ($.isFunction(this.options.callbacks.mouseleave)) {
          return this.options.callbacks.mouseleave(event, element);
        }
      };

      YamWrapper.prototype._showMenu = function(menu, parent) {
        var others;
        if (!this.isMenuHover(menu)) {
          this.checkHeightForMenu(menu, parent);
          this.positionSubmenu(menu, parent);
          if (menu.hasClass('yam-horizontal')) {
            menu.fadeIn(this.options.hover_animations["in"]);
          } else {
            menu.slideDown(this.options.hover_animations["in"]);
          }
          others = parent.siblings('.yam-active');
          others.addClass('yam-inactive');
          others.removeClass('yam-active');
          parent.addClass('yam-active');
          menu.addClass('yam-hover');
          return this.active[this.options.layout_vertical_at + menu.data("yam-level")] = menu;
        }
      };

      YamWrapper.prototype._hideMenu = function(menu) {
        var others;
        if (this.isMenuHover(menu)) {
          this.active[this.options.layout_vertical_at + menu.data("yam-level")] = void 0;
          if (menu.hasClass('yam-horizontal')) {
            menu.fadeOut(this.options.hover_animations.out);
          } else {
            menu.slideUp(this.options.hover_animations.out);
          }
          others = menu.closest('.yam-active').siblings('.yam-inactive');
          others.addClass('yam-active');
          others.removeClass('yam-inactive');
          menu.closest('.yam-active').removeClass('yam-active');
          return menu.removeClass('yam-hover');
        }
      };

      YamWrapper.prototype.isMenuHover = function(menu) {
        return menu.hasClass('yam-hover');
      };

      YamWrapper.prototype._walkMenu = function(parent, cal_function, level, old_parent) {
        var $items, $parent, i_sel, p_sel, that;
        if (level == null) {
          level = 0;
        }
        that = this;
        p_sel = this._getSelector(level)[0];
        i_sel = this._getSelector(level)[1];
        if (p_sel === 'self') {
          $parent = parent;
        } else {
          $parent = parent.find(p_sel);
        }
        if ($parent === void 0 || $parent.length === 0) {
          return;
        }
        $items = $parent.find(i_sel);
        if ($items === void 0 || $items.length === 0) {
          return;
        }
        cal_function(this, $parent, $items, level, parent);
        return $items.each(function(i, item) {
          return that._walkMenu($(item), cal_function, level + 1, old_parent);
        });
      };

      YamWrapper.prototype._getSelector = function(level) {
        if (level >= this.options.selectors.length) {
          return this.options.selectors[this.options.selectors.length - 1];
        } else {
          return this.options.selectors[level];
        }
      };

      YamWrapper.prototype._getLayout = function(level) {
        if (level >= (this.options.layout_vertical_at - 1)) {
          return 'vertical';
        } else {
          return 'horizontal';
        }
      };

      YamWrapper.prototype._getElementWidth = function(element, out) {
        if (out == null) {
          out = false;
        }
        if (!out) {
          return element.outerWidth();
        } else {
          return element.outerWidth() + parseInt(element.css("margin-left"), 10) + parseInt(element.css("margin-right"), 10);
        }
      };

      YamWrapper.prototype._getElementHeight = function(element, out) {
        if (out == null) {
          out = false;
        }
        if (!out) {
          return element.outerHeight();
        } else {
          return element.outerHeight() + parseInt(element.css("margin-top"), 10) + parseInt(element.css("margin-bottom"), 10);
        }
      };

      return YamWrapper;

    })();
    return $.fn[pluginName] = function(options) {
      return this.each(function() {
        if (!$.data(this, "plugin_" + pluginName)) {
          return $.data(this, "plugin_" + pluginName, new YamWrapper(this, options));
        }
      });
    };
  })(jQuery, window);

}).call(this);
