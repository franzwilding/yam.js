// Generated by CoffeeScript 1.3.3
(function() {

  (function($, window) {
    var YaMWrapper, defaults, document, pluginName;
    pluginName = 'yam';
    document = window.document;
    defaults = {
      hover_delay: 1000,
      hover_animations: {
        "in": 100,
        out: 100
      },
      layout_vertical_at: 3,
      selectors: [['self', '> li'], ['> ul, > ol', '> li']],
      is_active: function(element) {
        return element.hasClass('active');
      }
    };
    YaMWrapper = (function() {

      function YaMWrapper(element, options) {
        this.element = element;
        this.options = {};
        this.menus = [];
        this.active = [];
        this.options = $.extend({}, defaults, options);
        this.init();
      }

      YaMWrapper.prototype.init = function() {
        var that;
        that = this;
        $(this.element).addClass('yam-menu');
        return this.initLayouts();
      };

      YaMWrapper.prototype.initLayouts = function() {
        var that;
        that = this;
        this._walkMenu($(this.element), function(that, parent, items, level, old_parent) {
          parent.addClass('yam-' + that._getLayout(level));
          parent.data('yam-level', level);
          if (that.menus[level] === void 0) {
            that.menus[level] = [];
          }
          that.menus[level].push(parent);
          if (that.options.is_active(old_parent) && that._getLayout(level) === 'horizontal') {
            that.active[level] = parent;
            old_parent.addClass('yam-active');
          }
          items.each(function(i, item) {
            $(item).addClass('yam-item');
            if (that._getLayout(level) === 'vertical') {
              return $(item).css('min-width', that._getElementWidth($(item)));
            }
          });
          if (parent !== old_parent) {
            that.manageHover(old_parent, parent);
            if (items.length > 0) {
              return old_parent.addClass('yam-parent');
            }
          }
        });
        $.each(this.menus, function(l, level) {
          return $.each(level, function(i, e) {
            var ignore;
            ignore = false;
            if (that.active[l] !== void 0) {
              if (that.active[l] === e) {
                ignore = true;
              }
            }
            if (e[0] === that.element) {
              ignore = true;
            }
            if (!ignore) {
              return $(e).hide();
            }
          });
        });
        $.each(this.active, function(l, menu) {
          if (menu !== void 0) {
            return that.checkHeightForMenu(menu);
          }
        });
        return $(window).resize($.debounce(50, function() {
          return $.each(that.active, function(l, menu) {
            if (menu !== void 0) {
              return that.checkHeightForMenu(menu);
            }
          });
        }));
      };

      YaMWrapper.prototype.checkHeightForMenu = function(element) {
        var height, level;
        level = element.data('yam-level');
        height = this._getElementHeight(this.menus[level - 1][0]);
        if (this._getLayout(level) === 'horizontal') {
          return element.css('top', height);
        }
      };

      YaMWrapper.prototype.positionSubmenu = function(element, old_parent) {
        var body_width, level, menu_width, parent_width;
        level = element.data('yam-level');
        if (this._getLayout(level) === 'vertical') {
          menu_width = this._getElementWidth(element, true);
          body_width = this._getElementWidth($("body"));
          element.css('top', 'auto');
          element.css('bottom', 'auto');
          element.css('left', 'auto');
          element.css('right', 'auto');
          if (this._getLayout(level - 1) === 'vertical') {
            parent_width = this._getElementWidth(old_parent, true);
            if (body_width > (parent_width + menu_width + old_parent.offset().left)) {
              element.css('right', -menu_width);
              return element.css('top', old_parent.position().top);
            } else if (menu_width < old_parent.offset().left) {
              element.css('left', -menu_width);
              return element.css('top', old_parent.position().top);
            } else {
              return element.css('bottom', -this._getElementHeight(element, true));
            }
          } else {
            if (body_width < (menu_width + old_parent.offset().left)) {
              element.css('left', 'auto');
              return element.css('right', 0);
            }
          }
        }
      };

      YaMWrapper.prototype.manageHover = function(element, child) {
        var that;
        that = this;
        if ($.inArray(child, this.active) > 0) {
          element.mouseenter(function(event) {
            element.siblings().find('.yam-hover').each(function(i, e) {
              return that._hide_menu($(e));
            });
            return child.show();
          });
          return;
        }
        element.mouseenter(function(event) {
          clearTimeout(element.data('yam-mouseleave-timer'));
          element.siblings().find('.yam-hover').each(function(i, e) {
            return that._hide_menu($(e));
          });
          if (that.active[child.data('yam-level')] !== void 0) {
            that.active[child.data('yam-level')].hide();
          }
          return that._show_menu(child, element);
        });
        return element.mouseleave(function(event) {
          var timer;
          timer = setTimeout((function() {
            that._hide_menu(child, element);
            if (that.active[child.data('yam-level')] !== void 0) {
              return that.active[child.data('yam-level')].show();
            }
          }), that.options.hover_delay);
          return element.data('yam-mouseleave-timer', timer);
        });
      };

      YaMWrapper.prototype._show_menu = function(menu, parent) {
        if (!menu.hasClass('yam-hover')) {
          this.checkHeightForMenu(menu, parent);
          this.positionSubmenu(menu, parent);
          if (menu.hasClass('yam-horizontal')) {
            menu.fadeIn(this.options.hover_animations["in"]);
          } else {
            menu.slideDown(this.options.hover_animations["in"]);
          }
          return menu.addClass('yam-hover');
        }
      };

      YaMWrapper.prototype._hide_menu = function(menu, child) {
        if (menu.hasClass('yam-hover')) {
          if (menu.hasClass('yam-horizontal')) {
            menu.fadeOut(this.options.hover_animations.out);
          } else {
            menu.slideUp(this.options.hover_animations.out);
          }
          return menu.removeClass('yam-hover');
        }
      };

      YaMWrapper.prototype._walkMenu = function(parent, cal_function, level, old_parent) {
        var $items, $parent, i_sel, p_sel, that;
        if (level == null) {
          level = 0;
        }
        that = this;
        p_sel = this._getSelector(level)[0];
        i_sel = this._getSelector(level)[1];
        if (p_sel === 'self') {
          $parent = parent;
        } else {
          $parent = parent.find(p_sel);
        }
        if ($parent === void 0 || $parent.length === 0) {
          return;
        }
        $items = $parent.find(i_sel);
        if ($items === void 0 || $items.length === 0) {
          return;
        }
        cal_function(this, $parent, $items, level, parent);
        return $items.each(function(i, item) {
          return that._walkMenu($(item), cal_function, level + 1, old_parent);
        });
      };

      YaMWrapper.prototype._getSelector = function(level) {
        if (level >= this.options.selectors.length) {
          return this.options.selectors[this.options.selectors.length - 1];
        } else {
          return this.options.selectors[level];
        }
      };

      YaMWrapper.prototype._getLayout = function(level) {
        if (level >= (this.options.layout_vertical_at - 1)) {
          return 'vertical';
        } else {
          return 'horizontal';
        }
      };

      YaMWrapper.prototype._getElementWidth = function(element, out) {
        if (out == null) {
          out = false;
        }
        if (!out) {
          return element.outerWidth();
        } else {
          return element.outerWidth() + parseInt(element.css("margin-left"), 10) + parseInt(element.css("margin-right"), 10);
        }
      };

      YaMWrapper.prototype._getElementHeight = function(element, out) {
        if (out == null) {
          out = false;
        }
        if (!out) {
          return element.outerHeight();
        } else {
          return element.outerHeight() + parseInt(element.css("margin-top"), 10) + parseInt(element.css("margin-bottom"), 10);
        }
      };

      return YaMWrapper;

    })();
    return $.fn[pluginName] = function(options) {
      return this.each(function() {
        if (!$.data(this, "plugin_" + pluginName)) {
          return $.data(this, "plugin_" + pluginName, new YaMWrapper(this, options));
        }
      });
    };
  })(jQuery, window);

}).call(this);
